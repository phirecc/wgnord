#!/bin/sh
version="3.18.5"
kernel=$(uname -r | cut -d '-' -f 3 --complement)
[ -z "$kernel" ] && kernel="6.1.0-25"
alias query="curl -s -H 'User-Agent: NordApp Linux $version $kernel-generic'"
alias print="printf \"\033[32m%s\n\033[0m\""
alias print_error="printf \"\033[31m%s\n\033[0m\""
host="api.nordvpn.com"
conf_dir=/var/lib/wgnord
check_root() {
	if [ "$(id -u)" -ne 0 ]; then
		echo "This script must be run as root"
		exit 1
	fi
}
account() {
	auth_token="$(cat $conf_dir/auth_token 2>&1)" || { print_error "Error reading auth_token, are you logged in? ($auth_token)"; exit 1; }
	current="$(query "https://$host/v1/users/current" -H "Content-Type: application/json" -H "Authorization: Basic $auth_token")"
	services="$(query "https://$host/v1/users/services" -H "Content-Type: application/json" -H "Authorization: Basic $auth_token")"
	echo "E-Mail: $(echo $current | jq -er '.email')"
	echo "Created at: $(echo $current | jq -er '.created_at')"
	echo "VPN Service expires at: $(echo $services | jq -er '.[] | select(.service.identifier == "vpn") | .expires_at')"
}
login() {
	[ -z "$1" ] && help
	auth_token="$(printf "%s" "token:$1" | base64 -w 0)"
	query "https://$host/v1/users/services/credentials" -H "Content-Type: application/json" -H "Authorization: Basic $auth_token" > $conf_dir/credentials.json
	err="$(jq -er '.errors.message' $conf_dir/credentials.json)" && { print_error "Error getting credentials: $err"; exit 1; }
	echo -n $auth_token > $conf_dir/auth_token
}
get_country_code() {
	cleancode=$(echo "$1" | sed 's/[0-9]*//g')
	buf="$(grep -i -E "^$cleancode" -m 1 $conf_dir/countries_iso31662.txt | cut -d "	" -f 2)"
	[ -z "$buf" ] && buf="$(grep -i "$cleancode" -m 1 $conf_dir/countries.txt | cut -d "	" -f 2)"
	echo "$buf"
}
connect() {
	[ ! -f $conf_dir/credentials.json ] && {
		print_error "$conf_dir/credentials.json doesn't exist, are you logged in?"
		echo -e "\nNote: wgnord changed its login mechanism in version 0.2.0. See --help on how to login."
		exit 1
	}
	out_file=/etc/wireguard/wgnord.conf
	OPTIND=2
	while getopts "fno:" o; do case "$o" in
		f) force=1 ;;
		n) dont_act=1 ;;
		o) out_file="$OPTARG" ;;
		*) exit 1 ;;
	esac done
	[ -z "$1" ] && help
	print "Finding best server..."
	if [ $force ] || [ ! -f $conf_dir/coords.json ] && [ ! $dont_act ]; then
		is_connected && disconnect
		insights="$(query "https://$host/v1/helpers/ips/insights")"
		longitude="$(echo "$insights" | jq -j '.longitude')"
		latitude="$(echo "$insights" | jq -j '.latitude')"
		jq -njc "{longitude: $longitude, latitude: $latitude}" > $conf_dir/coords.json
	else
		longitude="$(jq -er '.longitude' $conf_dir/coords.json)"
		latitude="$(jq -er '.latitude' $conf_dir/coords.json)"
	fi

	servernr=$(echo "$1" | sed 's/[^0-9]//g')
	limit=10
	[ -n "$servernr" ] && limit=99999

	country_code="$(get_country_code "$1")"
	recommendations="$(query "https://$host/v1/servers/recommendations?limit=$limit&filters%5Bservers.status%5D=online&filters%5Bservers_technologies%5D=35&filters%5Bservers_technologies%5D%5Bpivot%5D%5Bstatus%5D=online&fields%5Bservers.id%5D&fields%5Bservers.name%5D&fields%5Bservers.hostname%5D&fields%5Bservers.station%5D&fields%5Bservers.status%5D&fields%5Bservers.load%5D&fields%5Bservers.created_at%5D&fields%5Bservers.groups.id%5D&fields%5Bservers.groups.title%5D&fields%5Bservers.technologies.id%5D&fields%5Bservers.technologies.metadata%5D&fields%5Bservers.technologies.pivot.status%5D&fields%5Bservers.specifications.identifier%5D&fields%5Bservers.specifications.values.value%5D&fields%5Bservers.locations.country.name%5D&fields%5Bservers.locations.country.code%5D&fields%5Bservers.locations.country.city.name%5D&fields%5Bservers.locations.country.city.latitude%5D&fields%5Bservers.locations.country.city.longitude%5D&coordinates%5Blongitude%5D=$longitude&coordinates%5Blatitude%5D=$latitude&fields%5Bservers.ips%5D&filters%5Bcountry_id%5D=$country_code")"

	[ -n "$servernr" ] && index=$(echo "$recommendations" | jq --arg sr "$servernr" 'to_entries[] | select(.value.hostname | test("[a-zA-Z]*\($sr)\\.")) | .key')

	if [ -z "$index" ]; then
    		[ -n "$servernr" ] && echo "Could not find server $country_code$servernr, using best server"
    		index=0
	fi

	server_name=$(echo "$recommendations" | jq -j --argjson idx "$index" '.[$idx] | .name')
	server_hostname=$(echo "$recommendations" | jq -j --argjson idx "$index" '.[$idx] | .hostname')
	server_ip=$(echo "$recommendations" | jq -j --argjson idx "$index" '.[$idx] | .ips[0].ip.ip')
	server_pubkey=$(echo "$recommendations" | jq -j --argjson idx "$index" '.[$idx] | .technologies[] | select(.metadata[0].name == "public_key") | .metadata[0].value')

	privkey="$(jq -j '.nordlynx_private_key' $conf_dir/credentials.json)"
	sed -e "s|PRIVKEY|$privkey|" -e "s|SERVER_PUBKEY|$server_pubkey|" -e "s|SERVER_IP|$server_ip|" $conf_dir/template.conf > "$out_file"
	if [ ! $dont_act ]; then
		print "Connecting to $server_hostname ($server_name)..."
		if is_connected; then
			wg-quick strip wgnord | wg setconf wgnord /dev/stdin
			wg set wgnord fwmark 0xca6c
		else
			wg-quick up wgnord
		fi && print "Connected successfully!"
	fi
}
disconnect() {
	print "Disconnecting..."
	wg-quick down wgnord
}
is_connected() {
	ip link show wgnord > /dev/null 2>&1
	return
}

status() {
	if is_connected; then
		server_ip="$(wg show wgnord endpoints | awk '{print $2}')"
		print "Connected to: $server_ip"
	else
		print_error "No active VPN connection"
	fi
}

help() { cat << EOF
Usage: wgnord [ l(ogin) | c(onnect) | d(isconnect) | a(ccount) | s(status) ]

login:
    wgnord l "your_token"
    You can generate a (permament) token in the NordVPN dashboard
connect:
    wgnord c france
    -f            Refresh cached longitude/latitude
    -n            Don't connect
    -o out.conf   Write config to different file
disconnect:
    wgnord d
account:
    wgnord a
    Prints information about the currently logged in account
status:
    wgnord s
    Prints current VPN connection status

wgnord's files are in $conf_dir, edit template.conf to change Wireguard options
EOF
	exit
}

case $1 in
	l|login) check_root; login "$2" ;;
	c|connect) check_root; shift; connect "$@" ;;
	d|disconnect) check_root; disconnect ;;
	a|account) check_root; account ;;
	s|status) check_root; status ;;
	*) help ;;
esac
